{"version":3,"sources":["music.js.input.js"],"names":["audioManager","hasAudio","tt","AudioManager","wx","constructor","createInnerAudioContext","this","audioInstances","moveTimer","combotimer","bgmContext","globalData","musicEnabled","hasPlayedStart","goodTimer","greatTimer","unbleaveableTimer","audioContexts","console","warn","'当前环境不支持音频API'","unbleaveable","clearTimeout","setVolume","'unbleaveable'","0.5","playSegment","0","1.6","fall","'fall'","1.2558","0.3546","great","'great'","1.5","stopBGM","stop","good","'good'","1","move","'move'","0.2","type","startTime","duration","context","seek","play","setTimeout","1000","gameover","'gameover'","1.2","initAudioWithDelay","playBGM","log","'initAudioWithDelay 播放背景音乐'","getFileSystemManager","'background.mp3'","createAudioContext","'res/music/background.mp3'","'res/music/start.mp3'","'res/music/music.mp3'","'res/music/newcord.mp3'","'res/music/time.mp3'","'res/music/move.mp3'","'res/music/good.mp3'","'res/music/great.mp3'","'res/music/unbleaveable.mp3'","'加载失败，正在重试'","200","combotime","t","'combotime'","start","'start'","2.5","clear","'clear'","0.7675","volume","'bgm'","Math","max","min","src","loop","audio","isEnabled","resetStart","0.35","setEnabled","enabled","gameState","Object","values","forEach"],"mappings":"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","file":"music.js","sourcesContent":["const tt = wx\r\nclass AudioManager {\r\n    constructor() {\r\n        // 检查音频API\r\n        if (!wx.createInnerAudioContext) {\r\n            console.warn('当前环境不支持音频API');\r\n            return;\r\n        }\r\n\t\t // 音频实例缓存\r\n\t\tthis.audioInstances = {};\r\n        // 为每种音效创建独立的音频上下文\r\n        \r\n\t\tthis.moveTimer = null;\r\n\t\tthis.combotimer = null;\r\n\r\n        // 创建背景音乐上下文\r\n        this.bgmContext = null;\r\n\r\n        // 默认开启音乐\r\n        wx.globalData.musicEnabled = false;\r\n\r\n        // 标记是否已经播放过开始音乐\r\n        this.hasPlayedStart = false;\r\n\t\tthis.goodTimer = null;\r\n\t\tthis.greatTimer = null;\r\n\t\tthis.unbleaveableTimer = null;\r\n\r\n        this.audioContexts = null\r\n    }\r\n\r\n\t    // 延迟初始化音频\r\n\tinitAudioWithDelay() {\r\n\t\tif (wx.globalData.musicEnabled){\r\n\t\t\tthis.playBGM();\r\n\t\t\tconsole.log('initAudioWithDelay 播放背景音乐');\r\n\t\t\treturn\t\r\n\t\t}\r\n\t\tsetTimeout(() => {\r\n\t\t\twx.globalData.musicEnabled = true;\r\n\t\t\twx.getFileSystemManager('background.mp3')\r\n\r\n\t\t\tthis.bgmContext = this.createAudioContext('res/music/background.mp3', true);\r\n\t\t\tif(!wx.globalData.musicEnabled){\r\n\t\t\t\tconsole.log('加载失败，正在重试');\r\n\t\t\t\t\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.audioContexts = {\r\n\t\t\t\tstart: this.createAudioContext('res/music/start.mp3'),\r\n\t\t\t\tclear: this.createAudioContext('res/music/music.mp3'),\r\n\t\t\t\tfall: this.createAudioContext('res/music/music.mp3'),\r\n\t\t\t\tgameover: this.createAudioContext('res/music/newcord.mp3'),\r\n\t\t\t\trotate: this.createAudioContext('res/music/music.mp3'),\r\n\t\t\t\tcombotime: this.createAudioContext('res/music/time.mp3',true),\r\n\t\t\t\tmove: this.createAudioContext('res/music/move.mp3'),\r\n\t\t\t\tgood: this.createAudioContext('res/music/good.mp3'),\r\n\t\t\t\tgreat: this.createAudioContext('res/music/great.mp3'),\r\n\t\t\t\tunbleaveable: this.createAudioContext('res/music/unbleaveable.mp3'),\r\n\t\r\n\t\t\t\t//perfect: this.createAudioContext('./music/perfect.mp3'),\r\n\t\t\t};\r\n\t\t\tthis.initAudioWithDelay();\r\n\t\t}, 200);\r\n\t}\r\n\r\n    // 创建音频上下文的辅助方法\r\n    createAudioContext(src, loop = false) {\r\n        const audio = wx.createInnerAudioContext();\r\n        audio.src = src;\r\n        audio.loop = loop;\r\n        return audio;\r\n    }\r\n\r\n    // 播放背景音乐\r\n    playBGM() {\r\n        if (!wx.globalData.musicEnabled) return;\r\n\t\tthis.setVolume('bgm', 0.35); \r\n        this.bgmContext.play();\r\n    }\r\n\r\n    // 停止背景音乐\r\n    stopBGM() {\r\n        this.bgmContext.stop();\r\n    }\r\n\r\n    // 播放指定片段\r\n    playSegment(type, startTime, duration) {\r\n        if (!wx.globalData.musicEnabled) return;\r\n        \r\n        const context = this.audioContexts[type];\r\n        if (!context) return;\r\n\r\n        context.stop();\r\n        context.seek(startTime);\r\n        context.play();\r\n        \r\n        return setTimeout(() => {\r\n            context.stop();\r\n        }, duration * 1000);\r\n    }\r\n\r\n    // 游戏开始音效\r\n    start() {\r\n        this.playSegment('start', 0, 2.5);\r\n    }\r\n\r\n    // 清除音效\r\n    clear() {\r\n        this.playSegment('clear', 0, 0.7675);\r\n    }\r\n\r\n    // 下落音效\r\n    fall() {\r\n        this.playSegment('fall', 1.2558, 0.3546);\r\n    }\r\n\r\n    // 游戏结束音效\r\n    gameover() {\r\n        this.playSegment('gameover', 0, 1.2);\r\n        //this.stopBGM();  // 游戏结束时停止背景音乐\r\n    }\r\n\t// 组合时间音效\r\n\tcombotime(t) {\r\n\t\t//this.setVolume('combotime', 0.5)\r\n\t\tif (this.combotimer) {\r\n            clearTimeout(this.combotimer);\r\n            this.combotimer = null;\r\n        }\r\n        this.combotimer = this.playSegment('combotime', 0, t);\r\n    }\r\n    // 移动音效\r\n    move() {\r\n\t\t// 清除之前的定时器（如果存在）\r\n        if (this.moveTimer) {\r\n            clearTimeout(this.moveTimer);\r\n            this.moveTimer = null;\r\n        }\r\n\t\tthis.setVolume('move', 0.5)\r\n\r\n        this.moveTimer = this.playSegment('move', 0, 0.2);\r\n    }\r\n\r\n\tgood() {\r\n\t\t// 清除之前的定时器（如果存在）\r\n        if (this.goodTimer) {\r\n            clearTimeout(this.goodTimer);\r\n            this.goodTimer = null;\r\n        }\r\n        this.setVolume('good', 0.5);\r\n\r\n        this.goodTimer = this.playSegment('good', 0, 1);\r\n\t}\r\n\tgreat() {\r\n\t\t// 清除之前的定时器（如果存在）\r\n        if (this.greatTimer) {\r\n            clearTimeout(this.greatTimer);\r\n            this.greatTimer = null;\r\n        }\r\n        this.setVolume('great', 0.5);\r\n\r\n        this.greatTimer = this.playSegment('great', 0, 1.5);\r\n\t}\r\n\tunbleaveable() {\r\n\t\t// 清除之前的定时器（如果存在）\r\n        if (this.unbleaveableTimer) {\r\n            clearTimeout(this.unbleaveableTimer);\r\n            this.unbleaveableTimer = null;\r\n        }\r\n        this.setVolume('unbleaveable', 0.5);\r\n\r\n        this.unbleaveableTimer = this.playSegment('unbleaveable', 0, 1.6);\r\n\t}\r\n    // 重置开始音乐状态\r\n    resetStart() {\r\n        this.hasPlayedStart = false;\r\n    }\r\n\r\n    // 设置音乐开关\r\n    setEnabled(enabled) {\r\n        wx.globalData.musicEnabled = enabled;\r\n        if (!enabled) {\r\n            // 停止所有音频\r\n            Object.values(this.audioContexts).forEach(context => {\r\n                context.stop();\r\n            });\r\n            this.stopBGM();  // 停止背景音乐\r\n        } else {\r\n            // 如果游戏正在进行，重新开始播放背景音乐\r\n            if (wx.globalData.gameState === 1) {\r\n                this.playBGM();\r\n            }\r\n        }\r\n    }\r\n\t // 设置指定音效的音量\r\n\tsetVolume(type, volume) {\r\n        if (type === 'bgm') {\r\n            this.bgmContext.volume = Math.max(0, Math.min(1, volume));\r\n        } else if (this.audioContexts[type]) {\r\n            this.audioContexts[type].volume = Math.max(0, Math.min(1, volume));\r\n        }\r\n    }\r\n    // 获取音乐开关状态\r\n    isEnabled() {\r\n        return wx.globalData.musicEnabled;\r\n    }\r\n}\r\n/**\r\n * @type {AudioManager}\r\n */\r\n// 创建单例实例\r\nexport const audioManager = new AudioManager();\r\nexport const hasAudio = true;"]}